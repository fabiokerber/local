Vagrant.configure('2') do |config|

    $script_foreman = <<-SCRIPT
        sudo bash -c 'echo "LC_ALL=en_US.utf8" >> /etc/default/locale
        sudo bash -c 'echo "LC_ALL=en_US.utf8" >> /etc/environment
        sudo bash -c 'echo "LANG=en_US.utf8" >> /etc/environment
        sudo bash -c 'echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections'
        sudo bash -c 'echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections'
        sudo bash -c 'rm "/etc/locale.gen"'
        sudo bash -c 'dpkg-reconfigure --frontend noninteractive locales'
        sudo bash -c 'echo "LANG=en_US.utf8" >> /etc/default/locale
    SCRIPT

    config.env.enable
    config.vm.boot_timeout = 1200

    if Vagrant.has_plugin?("vagrant-vbguest")
        config.vbguest.auto_update = false
    end

    config.vm.define 'foreman' do |foreman|

        foreman.vm.box = 'debian/bullseye64'
        foreman.vm.hostname = 'foreman.aut.lab'
        foreman.vm.network 'public_network', ip: ENV['FOREMAN_IP'], bridge: ENV['INTERFACE']

        foreman.vm.provision 'shell', inline: 'sudo sed -i "/127.0.1.1/d" /etc/hosts'
        foreman.vm.provision 'shell', inline: 'echo "$IP foreman.aut.lab foreman" >> /etc/hosts', env: {"IP" => ENV['FOREMAN_IP']}
        foreman.vm.provision 'shell', inline: 'echo "$IP log.aut.lab log" >> /etc/hosts', env: {"IP" => ENV['LOG_IP']}
        foreman.vm.provision 'shell', inline: 'echo "$IP zbx.aut.lab zbx" >> /etc/hosts', env: {"IP" => ENV['ZABBIX_IP']}
        foreman.vm.provision 'shell', inline: 'echo "$IP srv01.aut.lab srv01" >> /etc/hosts', env: {"IP" => ENV['SRV01_IP']}
        foreman.vm.provision 'shell', inline: 'echo "$IP srv02.aut.lab srv02" >> /etc/hosts', env: {"IP" => ENV['SRV02_IP']}

        foreman.vm.provision 'shell', inline: $script_foreman
        foreman.vm.provision :reload

        foreman.vm.provision 'shell', inline: 'sudo timedatectl set-timezone $TZ', env: {"TZ" => ENV['TIMEZONE']}
        foreman.vm.provision 'shell', inline: 'sudo apt update'

        foreman.vm.provision 'shell', inline: 'sudo apt install -y libc6-dev vim git curl ca-certificates'
        foreman.vm.provision 'shell', inline: 'sudo apt install -y build-essential checkinstall'
        foreman.vm.provision 'shell', inline: 'sudo apt install -y libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev'

        foreman.vm.provision 'shell', inline: 'wget -O /tmp/Python-3.9.13.tgz  https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz'
        foreman.vm.provision 'shell', inline: 'tar xzf /tmp/Python-3.9.13.tgz -C /usr/local/src/'
        foreman.vm.provision 'shell', inline: 'cd /usr/local/src/Python-3.9.13/ && ./configure --enable-optimizations && make altinstall'

        foreman.vm.provision 'shell', inline: 'pip3.9 install --upgrade pip && pip3.9 install --upgrade setuptools'
        foreman.vm.provision 'shell', inline: 'pip3.9 install setuptools_rust wheel && pip3.9 install ansible'
        foreman.vm.provision 'shell', inline: 'pip3.9 install psutil'
        foreman.vm.provision 'shell', inline: 'pip3.9 install ansible-tower-cli'

        foreman.vm.provision 'shell', inline: 'sudo mkdir -p /etc/ansible/roles'
        foreman.vm.provision 'shell', inline: 'sudo touch {/var/log/ansible.log,/etc/ansible/hosts}'
        foreman.vm.provision 'shell', inline: 'sudo chmod 777 /var/log/ansible.log'
        foreman.vm.provision 'shell', inline: 'sudo cp /vagrant/files/ansible.cfg /etc/ansible/'

        foreman.vm.provision 'shell', inline: 'wget -O /tmp/puppet7-release-bullseye.deb https://apt.puppet.com/puppet7-release-bullseye.deb'
        foreman.vm.provision 'shell', inline: 'sudo apt install -y /tmp/puppet7-release-bullseye.deb'

        foreman.vm.provision 'shell', inline: 'sudo wget https://deb.theforeman.org/foreman.asc -O /etc/apt/trusted.gpg.d/foreman.asc'
        foreman.vm.provision 'shell', inline: 'echo "deb http://deb.theforeman.org/ bullseye 3.2" | sudo tee /etc/apt/sources.list.d/foreman.list'
        foreman.vm.provision 'shell', inline: 'echo "deb http://deb.theforeman.org/ plugins 3.2" | sudo tee -a /etc/apt/sources.list.d/foreman.list'
        foreman.vm.provision 'shell', inline: 'sudo apt update'
        foreman.vm.provision 'shell', inline: 'sudo apt install -y foreman-installer'
        foreman.vm.provision 'shell', inline: 'sudo foreman-installer --enable-foreman-plugin-{remote-execution,ansible,templates} --enable-foreman-proxy-plugin-{remote-execution-ssh,ansible}'
        foreman.vm.provision 'shell', inline: 'sudo chown foreman-proxy.root /usr/share/foreman-proxy/'
        foreman.vm.provision 'shell', inline: 'sudo sed -i "2 i deprecation_warnings = False" /etc/foreman-proxy/ansible.cfg'

        foreman.vm.provider 'virtualbox' do |vb|
            vb.memory = 4096
            vb.cpus = 4
            vb.name = 'foreman.aut.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

    config.vm.define 'grafana_elk' do |grafana_elk|

        grafana_elk.vm.box = 'debian/bullseye64'
        grafana_elk.vm.hostname = 'log.aut.lab'
        grafana_elk.vm.network 'public_network', ip: ENV['LOG_IP'], bridge: ENV['INTERFACE']

        grafana_elk.vm.provision 'shell', inline: 'echo "$IP foreman.aut.lab foreman" >> /etc/hosts', env: {"IP" => ENV['FOREMAN_IP']}
        grafana_elk.vm.provision 'shell', inline: 'echo "$IP zbx.aut.lab zbx" >> /etc/hosts', env: {"IP" => ENV['ZABBIX_IP']}
        grafana_elk.vm.provision 'shell', inline: 'echo "$IP srv01.aut.lab srv01" >> /etc/hosts', env: {"IP" => ENV['SRV01_IP']}
        grafana_elk.vm.provision 'shell', inline: 'echo "$IP srv02.aut.lab srv02" >> /etc/hosts', env: {"IP" => ENV['SRV02_IP']}

        grafana_elk.vm.provision 'shell', inline: 'sudo timedatectl set-timezone $TZ', env: {"TZ" => ENV['TIMEZONE']}
        grafana_elk.vm.provision 'shell', inline: 'sudo sysctl -w vm.max_map_count=262144'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt update'

        grafana_elk.vm.provision 'shell', inline: 'sudo apt install -y vim git'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt install -y ca-certificates curl gnupg2 software-properties-common acl'
        grafana_elk.vm.provision 'shell', inline: 'sudo mkdir -p /etc/apt/keyrings'
        grafana_elk.vm.provision 'shell', inline: 'curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg'
        grafana_elk.vm.provision 'shell', inline: 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt update'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin'
        grafana_elk.vm.provision 'shell', inline: 'sudo systemctl restart docker'
        grafana_elk.vm.provision 'shell', inline: 'sudo setfacl -m user:vagrant:rw /var/run/docker.sock'
        grafana_elk.vm.provision 'shell', inline: 'sudo usermod -aG docker vagrant'

        grafana_elk.vm.provision 'shell', inline: 'mkdir -p /home/vagrant/volumes/{grafana,elk}'
        grafana_elk.vm.provision 'shell', inline: 'sudo chown vagrant. -R /home/vagrant/volumes'
        grafana_elk.vm.provision 'shell', inline: 'docker network create grafana-net'
        grafana_elk.vm.provision 'shell', inline: 'docker run -d --user 1000 -v /home/vagrant/volumes/grafana/:/var/lib/grafana -p 3000:3000 --restart always --name=grafana --network=grafana-net grafana/grafana'
        grafana_elk.vm.provision 'shell', inline: 'docker compose -f /vagrant/files/elk-docker-compose.yml up -d'

        grafana_elk.vm.provider 'virtualbox' do |vb|
            vb.memory = 4096
            vb.cpus = 4
            vb.name = 'log.aut.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

    config.vm.define 'zabbix' do |zabbix|

        zabbix.vm.box = 'debian/bullseye64'
        zabbix.vm.hostname = 'zbx.aut.lab'
        zabbix.vm.network 'public_network', ip: ENV['ZABBIX_IP'], bridge: ENV['INTERFACE']

        zabbix.vm.provision 'shell', inline: 'echo "$IP foreman.aut.lab foreman" >> /etc/hosts', env: {"IP" => ENV['FOREMAN_IP']}
        zabbix.vm.provision 'shell', inline: 'echo "$IP log.aut.lab log" >> /etc/hosts', env: {"IP" => ENV['LOG_IP']}
        zabbix.vm.provision 'shell', inline: 'echo "$IP srv01.aut.lab srv01" >> /etc/hosts', env: {"IP" => ENV['SRV01_IP']}
        zabbix.vm.provision 'shell', inline: 'echo "$IP srv02.aut.lab srv02" >> /etc/hosts', env: {"IP" => ENV['SRV02_IP']}

        zabbix.vm.provision 'shell', inline: 'sudo timedatectl set-timezone $TZ', env: {"TZ" => ENV['TIMEZONE']}
        zabbix.vm.provision 'shell', inline: 'sudo apt update'

        zabbix.vm.provision 'shell', inline: 'sudo apt install -y vim git'
        zabbix.vm.provision 'shell', inline: 'sudo apt install -y ca-certificates curl gnupg2 software-properties-common acl'
        zabbix.vm.provision 'shell', inline: 'sudo mkdir -p /etc/apt/keyrings'
        zabbix.vm.provision 'shell', inline: 'curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg'
        zabbix.vm.provision 'shell', inline: 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'
        zabbix.vm.provision 'shell', inline: 'sudo apt update'
        zabbix.vm.provision 'shell', inline: 'sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin'
        zabbix.vm.provision 'shell', inline: 'sudo systemctl restart docker'
        zabbix.vm.provision 'shell', inline: 'sudo setfacl -m user:vagrant:rw /var/run/docker.sock'
        zabbix.vm.provision 'shell', inline: 'sudo usermod -aG docker vagrant'

        zabbix.vm.provision 'shell', inline: 'mkdir -p /home/vagrant/volumes/zabbix'
        zabbix.vm.provision 'shell', inline: 'sudo chown vagrant. -R /home/vagrant/volumes'
        zabbix.vm.provision 'shell', inline: 'docker compose -f /vagrant/files/zbx-docker-compose.yml --profile zabbix up -d'

        zabbix.vm.provider 'virtualbox' do |vb|
            vb.memory = 4096
            vb.cpus = 4
            vb.name = 'zbx.aut.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

    config.vm.define 'srv01' do |srv01|

        srv01.vm.box = 'ubuntu/focal64'
        srv01.vm.hostname = 'srv01.aut.lab'
        srv01.vm.network 'public_network', ip: ENV['SRV01_IP'], bridge: ENV['INTERFACE']

        srv01.vm.provision 'shell', inline: 'echo "$IP foreman.aut.lab foreman" >> /etc/hosts', env: {"IP" => ENV['FOREMAN_IP']}
        srv01.vm.provision 'shell', inline: 'echo "$IP log.aut.lab log" >> /etc/hosts', env: {"IP" => ENV['LOG_IP']}
        srv01.vm.provision 'shell', inline: 'echo "$IP zbx.aut.lab zbx" >> /etc/hosts', env: {"IP" => ENV['ZABBIX_IP']}
        srv01.vm.provision 'shell', inline: 'echo "$IP srv02.aut.lab srv02" >> /etc/hosts', env: {"IP" => ENV['SRV02_IP']}

        srv01.vm.provision 'shell', inline: 'sudo timedatectl set-timezone $TZ', env: {"TZ" => ENV['TIMEZONE']}
        srv01.vm.provision 'shell', inline: 'sudo apt update'

        srv01.vm.provider 'virtualbox' do |vb|
            vb.memory = 1024
            vb.cpus = 2
            vb.name = 'srv01.aut.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

    config.vm.define 'srv02' do |srv02|

        srv02.vm.box = 'rockylinux/8'
        srv02.vm.hostname = 'srv02.aut.lab'
        srv02.vm.network 'public_network', ip: ENV['SRV02_IP'], bridge: ENV['INTERFACE']

        srv02.vm.provision 'shell', inline: 'echo "$IP foreman.aut.lab foreman" >> /etc/hosts', env: {"IP" => ENV['FOREMAN_IP']}
        srv02.vm.provision 'shell', inline: 'echo "$IP log.aut.lab log" >> /etc/hosts', env: {"IP" => ENV['LOG_IP']}
        srv02.vm.provision 'shell', inline: 'echo "$IP zbx.aut.lab zbx" >> /etc/hosts', env: {"IP" => ENV['ZABBIX_IP']}
        srv02.vm.provision 'shell', inline: 'echo "$IP srv01.aut.lab srv01" >> /etc/hosts', env: {"IP" => ENV['SRV01_IP']}

        srv02.vm.provision 'shell', inline: 'sudo timedatectl set-timezone $TZ', env: {"TZ" => ENV['TIMEZONE']}
        srv02.vm.provision 'shell', inline: 'sudo yum install -y vim'

        srv02.vm.provider 'virtualbox' do |vb|
            vb.memory = 1024
            vb.cpus = 2
            vb.name = 'srv02.aut.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

end